name: Organize Merged Submissions

on:
  push:
    branches:
      - main
    paths:
      - 'submissions/**/*.json'
      - 'submissions/**/*.yaml' 
      - 'submissions/**/*.yml'
  pull_request:
    types: [closed]

jobs:
  organize:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Organize files by username
      id: organize
      run: |
        echo "üîÑ Organizing submission files by username..."
        
        # Run the organization script
        if python scripts/organize_by_username.py submissions/ data/organized/; then
          echo "‚úÖ Files organized successfully"
          echo "organized=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è  Some errors occurred during organization"
          echo "organized=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check for changes
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        # Pull latest changes to avoid conflicts
        git pull --rebase
        
        # Add all changes
        git add .
        
        # Create commit message
        commit_message="üóÇÔ∏è Organize submissions by username"
        
        # Add details about the commit that triggered this
        if [ -n "${{ github.event.head_commit.message }}" ]; then
          commit_message="$commit_message
        
        Triggered by: ${{ github.event.head_commit.message }}"
        fi
        
        # Commit changes
        git commit -m "$commit_message"
        
        # Push changes with retry logic
        max_retries=3
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          if git push; then
            echo "‚úÖ Successfully pushed changes"
            break
          else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "‚ö†Ô∏è Push failed, pulling latest changes and retrying (attempt $retry_count/$max_retries)..."
              git pull --rebase
            else
              echo "‚ùå Failed to push after $max_retries attempts"
              exit 1
            fi
          fi
        done
    
    - name: Create summary
      run: |
        echo "## üìä Organization Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.organize.outputs.organized }}" == "true" ]; then
          echo "‚úÖ **Status:** Successfully organized submission files" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è  **Status:** Organization completed with some errors" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ User Directories" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # List user directories
        if [ -d "data/organized" ]; then
          for dir in data/organized/*/; do
            if [ -d "$dir" ]; then
              username=$(basename "$dir")
              file_count=$(find "$dir" -type f | wc -l)
              echo "- **$username**: $file_count file(s)" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "No user directories found." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Delete merged branch
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const branchName = pr.head.ref;
          const owner = pr.head.repo.owner.login;
          const repo = pr.head.repo.name;
          
          // Only delete if it's from the same repository (not a fork)
          if (owner === context.repo.owner && repo === context.repo.repo) {
            try {
              await github.rest.git.deleteRef({
                owner: owner,
                repo: repo,
                ref: `heads/${branchName}`
              });
              console.log(`‚úÖ Deleted branch: ${branchName}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Could not delete branch ${branchName}: ${error.message}`);
            }
          } else {
            console.log(`‚ÑπÔ∏è Branch ${branchName} is from a fork, not deleting`);
          }